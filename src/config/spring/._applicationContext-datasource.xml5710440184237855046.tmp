<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	
	<!-- 数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">    
       <!-- 数据库基本信息配置 -->  
       <property name="url" value="${frame.jdbc.url}" />    
       <property name="username" value="${frame.jdbc.username}" />    
       <property name="password" value="${frame.jdbc.password}" />    
       <property name="driverClassName" value="${frame.jdbc.driverClassName}" />    
       <!-- <property name="filters" value="${frame.jdbc.filters}" />   -->  
        <!-- 最大并发连接数 -->  
       <property name="maxActive" value="${frame.jdbc.maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name="initialSize" value="${frame.jdbc.initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name="maxWait" value="${frame.jdbc.maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name="minIdle" value="${frame.jdbc.minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name="timeBetweenEvictionRunsMillis" value ="${frame.jdbc.timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <!-- <property name="minEvictableIdleTimeMillis" value ="${frame.jdbc.minEvictableIdleTimeMillis}" />   
       <property name="validationQuery" value="${frame.jdbc.validationQuery}" />  
       <property name="testWhileIdle" value="${frame.jdbc.testWhileIdle}" />    
       <property name="testOnBorrow" value="${frame.jdbc.testOnBorrow}" />
       <property name="testOnReturn" value="${frame.jdbc.testOnReturn}" /> 
       <property name="maxOpenPreparedStatements" value ="${frame.jdbc.maxOpenPreparedStatements}" /> -->
       <!-- 打开 removeAbandoned 功能 -->  
       <!-- <property name="removeAbandoned" value="${frame.jdbc.removeAbandoned}" /> -->
       <!-- 1800 秒，也就是 30 分钟 -->  
       <!-- <property name="removeAbandonedTimeout" value="${frame.jdbc.removeAbandonedTimeout}" /> -->  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <!-- <property name="logAbandoned" value="${frame.jdbc.logAbandoned}" />   -->
	</bean>  

	<!-- 会话工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingLocations">
			<list>
				<value>classpath:/framework/db/pojo/*.hbm.xml</value>
				<value>classpath:/demo/**/pojo/*.hbm.xml</value>
				<value>classpath:/com/sunchin/shop/admin/pojo/*.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">framework.db.MyOracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				<prop key="hibernate.connection.SetBigStringTryClob">true</prop>
			</props>
		</property>
	</bean>
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    	<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 支持 @Transactional 标记 -->
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/>
	
	<!-- 配置Spring的事务处理 -->
	<!-- 创建事务管理器-->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
	<aop:config>
		<!-- 设置pointCut表示哪些方法要加入事务处理 -->
		<!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常
		就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
		<aop:pointcut id="allMethods"
			expression="execution(* com.sunchin.shop.admin..*.service.impl.*.*(..))" />
		<!-- 通过advisor来确定具体要加入事务控制的方法 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
	</aop:config>
	
	<!-- 配置事务管理器应用的范围 -->
	<!-- 配置Advice(事务的传播特性) 即：配置哪些方法要加入事务控制 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
		<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
		<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		<!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
		<tx:method name="add*" propagation="REQUIRED"/>
		<tx:method name="del*" propagation="REQUIRED"/>
		<tx:method name="update*" propagation="REQUIRED"/>
		<tx:method name="save*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
</beans>